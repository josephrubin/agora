# Note: after editing, run `npm run codegen` to generate new TS types.
# Or, if you are running `npm run dev`, that will happen automatically.
# Also this might be helpful:
#   https://benoitboure.com/how-to-use-typescript-with-appsync-lambda-resolvers

# Omitted as suggested https://spec.graphql.org/June2018/.
# schema {
#   query: Query
#   mutation: Mutation
# }

type Query {
  """Get an AuthenticatedUser node from which to read a user's data."""
  readAuthenticate(accessToken: String!): AuthenticatedUser!
}

type Mutation {
  """Create a new cast for the requesting user. """
  createCast(accessToken: String!, input: CastInput!): Cast!
  """Change the index of the specified NFT to a different assigned index, pushing the other ones around."""
  reorderCast(accessToken: String!, id: ID!, index: Int!): Cast
  """Transfer a cast to the given username. Returns the cast if successful, else null."""
  transferCast(accessToken: String!, id: ID!, username: String!): Cast
  """Mark a Cast as exported to Solana. Returns the resultant Cast or null."""
  exportCast(accessToken: String!, id: ID!, txId: String!): Cast

  """
  Create a new user (sign up). As is standard, user/pass are passed over
  HTTPS to the server and passed to Cognito.
  A wallet is also generated.
  """
  createUser(username: String!, password: String!): User!
  """Create a new user session (sign in)."""
  createSession(username: String!, password: String!): Session!
  """Refresh a session (get new keys with later expiration)."""
  refreshSession(username: String!, refreshToken: String!): Session!
}

"""
A representation of an NFT that could be exported.
"""
type Cast {
  id: ID!

  # A short name for the NFT that will be created from this Cast, as per the Solana NFT standard.
  title: String!

  # A unique integer representing this Cast's order on a user's page.
  index: Int!

  # The mime type of the Cast's data.
  mimeType: String!

  # The location of the Cast's data. Usually an IPFS URL.
  uri: String!

  # The centralized location of the Cast's data. This may be a URL into our storage.
  centralizedUri: String!

  # The Solana transaction id for the NFT, if this cast has actually been exported.
  txId: String

  # The transaction history of this NFT.
  history: [HistoryItem!]!
}

input CastInput {
  title: String!
  mimeType: String!
  uri: String!
  centralizedUri: String!
}

type HistoryItem {
  """The unix epoch at which this history item occured."""
  epoch: String!
  """The thing that happened: transfer/export."""
  event: String!
  """The recipient of the event; either a username or a wallet address."""
  target: String!
}

"""A platform user."""
type User {
  """This user's sign in username."""
  username: String!
}

"""
A node that represents successful authentication. All properties
of this node are accessible to the authenticated user who has
queried AuthenticatedUser. The access token's claims have been
verified.
"""
type AuthenticatedUser {
  accessToken: String!

  """The verified claimed userId (Cognito sub)."""
  userId: String!
  """The verified claimed username."""
  username: String!

  """All of this user's casts."""
  casts: [Cast!]!
  """Read a specific cast by id, or null if not found"""
  readCast(id: ID!): Cast
  """The user behind this authenticated user."""
  user: User!
}

"""A login session (sessions are currently implemented by Cognito)."""
type Session {
  """The username of the user who owns this session."""
  username: String!
  """The JWT that allows users to claim who they are and act accordingly."""
  accessToken: String!
  """
  A JWT that lets a user request a new accessToken. The accessToken has
  a relatively low TTL while the refreshToken lasts much longer.
  """
  refreshToken: String!
}
